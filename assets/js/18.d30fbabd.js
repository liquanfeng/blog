(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{262:function(e,t,n){"use strict";n.r(t);var r=n(5),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("p",[e._v("通用引用用来绑定任何值，包括左值和右值")]),e._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Widget&& var1 = someWidget;      // here, “&&” means rvalue reference\nauto&& var2 = var1;              // here, “&&” does not mean rvalue reference\ntemplate<typename T>\nvoid f(std::vector<T>&& param);  // here, “&&” means rvalue reference\ntemplate<typename T>\nvoid f(T&& param);               // here, “&&”does not mean rvalue reference\n")])])]),n("p",[e._v("是通用引用而不是右值引用")]),e._v(" "),n("ul",[n("li",[e._v("T&&形式")]),e._v(" "),n("li",[e._v("T的类型需要推导")])]),e._v(" "),n("div",{staticClass:"language-c++ extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("int lvalue = 3;\nauto&& r1 = lvalue;\n\nauto&& r2 = 4;\n\nint&& r3 = 5;\nauto&& r4 = r3; //等价于int& r4 = r3;\n\nstd::vector<int> vect;\nauto&& r5 = vect[0];\n\ntemplate<typename T>\nvoid func(T&& p);\n\nfunc(lvalue);\nfunc(10);\n")])])]),n("p",[e._v("这里r3是右值引用，因为没有类型推导；相反，r1, r2, r4, r5和p都是通用引用：")]),e._v(" "),n("ul",[n("li",[e._v("r1等价于左值引用；")]),e._v(" "),n("li",[e._v("r2等价于右值引用；")]),e._v(" "),n("li",[e._v("r4等价于左值引用；没错，是左值引用，因为r3是左值(虽然它是右值引用类型的变量)；")]),e._v(" "),n("li",[e._v("r5等价于左值引用；因为"),n("code",[e._v("std::vector<int>::operator[]")]),e._v("返回左值引用(左值引用是左值)；")]),e._v(" "),n("li",[e._v("func(lvalue)中，p等价于左值引用；")]),e._v(" "),n("li",[e._v("func(10)中，p等价于右值引用；")])]),e._v(" "),n("blockquote",[n("p",[e._v("https://www.yuanguohuo.com/2018/05/25/cpp11-universal-ref/")])])])}),[],!1,null,null,null);t.default=a.exports}}]);